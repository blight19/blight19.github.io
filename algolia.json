[{"author":null,"categories":["Tech"],"content":"","date":1704931200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1704931200,"objectID":"cf0c8ddc5d6d272c644f013fe96d1c7d","permalink":"/post/process2process_communication/","publishdate":"2024-01-11T00:00:00Z","readingtime":1,"relpermalink":"/post/process2process_communication/","section":"post","summary":"## 使用操作系统中的管道来进行通信 创建管道 syscall.Mkfifo(path, 0666) 读取和写入 func read() { fmt.Println(\u0026#34;open a named pipe file for read.\u0026#34;) file, _ := os.OpenFile(pipeFile, os.O_RDWR, os.ModeNamedPipe) reader := bufio.NewReader(file) for { line, err := reader.ReadBytes(\u0026#39;\\n\u0026#39;) fmt.Println(\u0026#34;read...\u0026#34;) if err == nil { fmt.Print(\u0026#34;load string: \u0026#34; + string(line)) } } } func write() { f,","tags":["golang","os"],"title":"进程间通信方式","type":"post","url":"/post/process2process_communication/","weight":0,"wordcount":171},{"author":null,"categories":["Tech"],"content":"","date":1704844800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1704844800,"objectID":"80f02f6427bc58f3051eb2600367dce6","permalink":"/post/how_linux_work1/","publishdate":"2024-01-10T00:00:00Z","readingtime":1,"relpermalink":"/post/how_linux_work1/","section":"post","summary":"每个程序单独调用设备的话，对于编写十分复杂，开发成本高，并且多个进程同时调用一个设备会产生问题。为了解决这个问题，单独编写驱动程序来和设备交","tags":["linux"],"title":"Linux是怎样工作的读书笔记-第一章","type":"post","url":"/post/how_linux_work1/","weight":0,"wordcount":384},{"author":null,"categories":["Tech"],"content":"","date":1704844800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1704844800,"objectID":"7b2fb7c883576eee19fd0a0a9586cd1b","permalink":"/post/smooth_weight_round_robin2/","publishdate":"2024-01-10T00:00:00Z","readingtime":3,"relpermalink":"/post/smooth_weight_round_robin2/","section":"post","summary":"负载均衡算法\u0026ndash;平滑加权轮询法2 那上篇文章我们了解了平滑加权轮询，同时实现了一个简单的golang版本。 那么，我们仔细想像下还有没","tags":["负载均衡","tag2"],"title":"负载均衡算法2","type":"post","url":"/post/smooth_weight_round_robin2/","weight":0,"wordcount":1097},{"author":null,"categories":["Tech"],"content":"","date":1704758400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1000,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1704758400,"objectID":"661c525e64fc8123741a0894a27adb8a","permalink":"/post/smooth_weight_round_robin/","publishdate":"2024-01-09T00:00:00Z","readingtime":2,"relpermalink":"/post/smooth_weight_round_robin/","section":"post","summary":"负载均衡算法\u0026ndash;平滑加权轮询法 平常比较常用的负载均衡算法有 随机 一致性哈希 轮询 加权轮询 其中，加权轮询算法常用的是平滑加权轮询法，比如","tags":["tag1","tag2"],"title":"负载均衡算法","type":"post","url":"/post/smooth_weight_round_robin/","weight":0,"wordcount":966},{"author":null,"categories":["Tech"],"content":"","date":1528070400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1528070400,"objectID":"be3d5cf9cd6acbc273a36563933ffdd6","permalink":"/post/my-first-post/","publishdate":"2018-06-04T00:00:00Z","readingtime":1,"relpermalink":"/post/my-first-post/","section":"post","summary":"第一篇文章 测试测试","tags":["tag1","tag2"],"title":"An Example Post","type":"post","url":"/post/my-first-post/","weight":0,"wordcount":9},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"About Me ","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":2},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"notes/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/notes/","section":"","summary":"","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"","tags":null,"title":"","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]